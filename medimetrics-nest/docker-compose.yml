version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: medimetrics-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-medimetrics}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - medimetrics

  # Redis Queue
  redis:
    image: redis:7-alpine
    container_name: medimetrics-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - medimetrics

  # MinIO S3 Storage
  minio:
    image: minio/minio:latest
    container_name: medimetrics-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY:-medimetrics}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY:-medimetricssecret}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - medimetrics

  # MinIO Client for bucket creation
  minio-client:
    image: minio/mc:latest
    container_name: medimetrics-minio-client
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set minio http://minio:9000 ${S3_ACCESS_KEY:-medimetrics} ${S3_SECRET_KEY:-medimetricssecret};
      mc mb --ignore-existing minio/${S3_BUCKET_RAW:-medimetrics-raw};
      mc mb --ignore-existing minio/${S3_BUCKET_DERIV:-medimetrics-derivatives};
      mc mb --ignore-existing minio/${S3_BUCKET_REPORTS:-medimetrics-reports};
      mc anonymous set download minio/${S3_BUCKET_REPORTS:-medimetrics-reports};
      exit 0;
      "
    networks:
      - medimetrics

  # Orthanc DICOM Server
  orthanc:
    image: orthancteam/orthanc:latest
    container_name: medimetrics-orthanc
    command: /run/secrets/
    environment:
      ORTHANC__REGISTERED_USERS: |
        {"${ORTHANC_USER:-orthanc}": "${ORTHANC_PASS:-orthanc}"}
      ORTHANC__DICOM_WEB__ENABLE: "true"
      ORTHANC__DICOM_WEB__ROOT: "/dicom-web/"
      ORTHANC__DICOM_WEB__ENABLE_WADO: "true"
      ORTHANC__DICOM_WEB__WADO_ROOT: "/wado"
      ORTHANC__REMOTE_ACCESS_ALLOWED: "true"
      ORTHANC__AUTHENTICATION_ENABLED: "true"
    volumes:
      - orthanc_data:/var/lib/orthanc/db
      - ./dicom/orthanc.json:/etc/orthanc/orthanc.json:ro
    ports:
      - "8042:8042"
      - "4242:4242"
    networks:
      - medimetrics

  # NestJS API
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: medimetrics-api
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DB_URL: ${DB_URL:-postgres://postgres:postgres@postgres:5432/medimetrics}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      S3_ENDPOINT: ${S3_ENDPOINT:-http://minio:9000}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY:-medimetrics}
      S3_SECRET_KEY: ${S3_SECRET_KEY:-medimetricssecret}
      ORTHANC_URL: ${ORTHANC_URL:-http://orthanc:8042}
      ORTHANC_USER: ${ORTHANC_USER:-orthanc}
      ORTHANC_PASS: ${ORTHANC_PASS:-orthanc}
      JWT_SECRET: ${JWT_SECRET:-change-me-supersecret-jwt-key-min-32-chars}
      FIELD_ENCRYPTION_KEK: ${FIELD_ENCRYPTION_KEK:-auto-generate-on-first-run-32bytes}
      WEBHOOK_HMAC_SECRET: ${WEBHOOK_HMAC_SECRET:-change-me-webhook-hmac-secret}
      INFERENCE_URL: ${INFERENCE_URL:-http://inference:9200}
    volumes:
      - ./apps/api:/app
      - /app/node_modules
    ports:
      - "8000:8000"
      - "9100:9100"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - medimetrics
    command: >
      sh -c "
      npm run migration:run &&
      npm run seed &&
      npm run start:dev
      "

  # FastAPI Inference Service
  inference:
    build:
      context: ./apps/inference
      dockerfile: Dockerfile
    container_name: medimetrics-inference
    environment:
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      S3_ENDPOINT: ${S3_ENDPOINT:-http://minio:9000}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY:-medimetrics}
      S3_SECRET_KEY: ${S3_SECRET_KEY:-medimetricssecret}
      S3_BUCKET_RAW: ${S3_BUCKET_RAW:-medimetrics-raw}
      S3_BUCKET_DERIV: ${S3_BUCKET_DERIV:-medimetrics-derivatives}
      WEBHOOK_URL: ${API_BASE_URL:-http://api:8000}/inference/webhook
      WEBHOOK_HMAC_SECRET: ${WEBHOOK_HMAC_SECRET:-change-me-webhook-hmac-secret}
      GPU_ENABLED: ${GPU_ENABLED:-false}
      MODEL_REGISTRY_PATH: /app/models
    volumes:
      - ./apps/inference:/app
      - ./data/fixtures:/data/fixtures:ro
    ports:
      - "9200:9200"
      - "9201:9201"
    depends_on:
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - medimetrics
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # RQ Worker for inference jobs
  worker:
    build:
      context: ./apps/inference
      dockerfile: Dockerfile
    container_name: medimetrics-worker
    command: python -m src.worker.runner
    environment:
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      S3_ENDPOINT: ${S3_ENDPOINT:-http://minio:9000}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY:-medimetrics}
      S3_SECRET_KEY: ${S3_SECRET_KEY:-medimetricssecret}
      S3_BUCKET_RAW: ${S3_BUCKET_RAW:-medimetrics-raw}
      S3_BUCKET_DERIV: ${S3_BUCKET_DERIV:-medimetrics-derivatives}
      WEBHOOK_URL: ${API_BASE_URL:-http://api:8000}/inference/webhook
      WEBHOOK_HMAC_SECRET: ${WEBHOOK_HMAC_SECRET:-change-me-webhook-hmac-secret}
      GPU_ENABLED: ${GPU_ENABLED:-false}
      MODEL_REGISTRY_PATH: /app/models
    volumes:
      - ./apps/inference:/app
    depends_on:
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - medimetrics
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 4G

  # Next.js Web Application
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${API_BASE_URL:-http://localhost:8000}
    container_name: medimetrics-web
    environment:
      NEXT_PUBLIC_API_URL: ${API_BASE_URL:-http://localhost:8000}
      NEXTAUTH_URL: ${WEB_BASE_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${JWT_SECRET:-change-me-supersecret-jwt-key-min-32-chars}
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - medimetrics

  # Prometheus Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: medimetrics-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - medimetrics

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: medimetrics-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infra/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - medimetrics

networks:
  medimetrics:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  minio_data:
  orthanc_data:
  prometheus_data:
  grafana_data: